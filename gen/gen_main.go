package main

import (
	"bufio"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var registryTemplate = `// Code generated by generator, DO NOT EDIT.
package main

import (
	{{- range .Solutions }}
	"{{ $.ModuleName }}/{{ .Path }}"
	{{- end }}
	"fmt"
)

func getImplementation(year, day uint) (Solution, error) {
	registry := map[string]Solution{
		{{- range .Solutions }}
		{{ .Path | printf "%q" }}: &{{ .PackageName }}.Solution{},
		{{- end }}
	}
	path := fmt.Sprintf("solutions/%d/day_%02d", year, day)
	solution, ok := registry[path]
	if !ok {
		return nil, fmt.Errorf("no solution found")
	}
	return solution, nil
}`

type templateData struct {
	ModuleName string
	Solutions  []solutionMetadata
}

type solutionMetadata struct {
	Path        string
	PackageName string
}

func check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func main() {
	t := template.Must(template.New("registry").Parse(registryTemplate))
	f, err := os.Create("main_generated.go")
	check(err)
	solutions := getSolutions()
	moduleName := getModuleName()

	data := templateData{
		ModuleName: moduleName,
		Solutions:  solutions,
	}
	err = t.Execute(f, data)
	check(err)
}

func getSolutions() []solutionMetadata {
	var metadata []solutionMetadata
	root := "solutions"
	err := filepath.WalkDir(root, func(path string, d fs.DirEntry, err error) error {
		if err != nil || !d.IsDir() || strings.Count(path, "/") != 2 {
			return nil
		}
		metadata = append(metadata, solutionMetadata{Path: path, PackageName: d.Name()})
		return nil
	})
	check(err)
	return metadata
}

func getModuleName() string {
	f, err := os.Open("go.mod")
	check(err)
	defer f.Close()
	scanner := bufio.NewScanner(f)
	scanner.Scan()
	line := scanner.Text()
	if !strings.HasPrefix(line, "module") {
		log.Fatal("go.mod's first line does not start with module: can't infer module name")
	}
	return strings.Fields(line)[1]
}
